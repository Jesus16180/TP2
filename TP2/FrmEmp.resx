<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAIAEBAAAAEACABoBQAAJgAAABAQAAABACAAaAQAAI4FAAAoAAAAEAAAACAAAAABAAgAAAAAAAAB
        AAAAAAAAAAAAAAABAAAAAQAA/wD/AAh1DQAHUXcAiEUkAMVLJwDHWyoAyFsqANpZLgDkXDUAqGlcAPFi
        SgDybkkA9W1UAPBzWQD3e10A+XhaABCmHQATqiIAFq0mABevKgAasS0AHLQxACC4NgAhuDkAJb0+ACa+
        QQAqwUcALMNJAC/HTwAwyVIANc5ZADjRXgA60mAAPNRiAD7XZgA/2GgAQdptAEXdcQBJ4nkATeZ/AKqC
        bQD6hF8A/4hhAP2LaQD+jGoAAFWAAABWhAAAWocABl2HAApYggAHaJkAEWuWABBqmwAabqwAJ32oAAxy
        zwAMftgAFHrQABiHrgAYiK8AKYOsACWDsAAkhLAAOZC5AHKapAB1nq4AMpHMAB6H5AAphfMALorwADOU
        +QAylv0ANZr5ADec+wA2mfwAOaD4AD2k+wA/pvwAba3LAECl7QBBp/sARq37AEGp/gBEq/wASbH8AE20
        /wBPuf8AUbr/AFO+/wCdkJAA6qubAO61owD57u0A+vv7AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
</value>
  </data>
</root>